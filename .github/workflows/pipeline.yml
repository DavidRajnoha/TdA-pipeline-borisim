name: Push to Docker Hub and deploy to AWS

on: [push]

env:
  AWS_REGION: us-east-2                  
  ECR_REPOSITORY: pipeline_test           
  ECS_SERVICE: sample-app-service         
  ECS_CLUSTER: sample-app-cluster                
  ECS_TASK_DEFINITION: task_def.json 
  CONTAINER_NAME: sample-app
  
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Out Repo 
        uses: actions/checkout@v3     
   
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build
        uses: docker/build-push-action@v3
        with:
          context: ./app
          tags: myimage:latest
          outputs: type=docker,dest=/tmp/myimage.tar
      
      - name: Upload image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: myimage
          path: /tmp/myimage.tar
  
  push:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: myimage
          path: /tmp
      
      - name: Load and push image
        env:
            IMAGE_TAG: ${{ github.sha }}
        run: |
          docker load --input /tmp/myimage.tar
          docker tag myimage simondes/pipeline_test:$IMAGE_TAG
          docker push simondes/pipeline_test:$IMAGE_TAG
  
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2
      
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: myimage
          path: /tmp
      
      - name: Load, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker load --input /tmp/myimage.tar
          docker tag myimage $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"          
          
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          
